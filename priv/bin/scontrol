#!/usr/bin/env python
import os
import copy
import string
import subprocess
import signal
import sys
import socket
import re
import time
import glob
import imp
from datetime import datetime
from optparse import OptionParser


basedir = os.path.dirname(os.path.abspath(sys.argv[0]))
os.chdir(basedir)

(_,version) = os.path.split(os.path.realpath(sys.path[0]))

extensions = []

## Load custom command line options
for f in glob.glob("priv/scontrol.*.py") + glob.glob("deps/*/priv/scontrol.*.py"):
    m = re.sub(r'.py$','',re.sub(r'/','_',re.sub(r'\.','_',f)))
    print "Loading extension: "+f
    extensions.append(imp.load_source(m,f))

def callext(func,*args):
    for e in extensions:
        if hasattr(e,func):
            getattr(e,func)(*args)

def callfirst(func,*args):
    for e in extensions:
        if hasattr(e,func):
            return getattr(e,func)(*args)
    return None

# Controls order modules are searched, ideally, only one extension would define this function
# If more than one does, find a way to be the last one to run
callext("ext_order",extensions)

valid_args = ["start","debug","restart","stop","kill","connect","status",
              "upstart"]

usage = "%prog [options] <"+string.join(valid_args,"|")+"""> [CONNECT_ARG]

   start : Starts in background mode
   debug : Starts in foreground mode
 restart : Same thing as %proc stop start
    stop : Stops erlang with SIGTERM signal
    kill : Stops erlang with SIGKILL signal
 connect : Connect to a running node"
  status : Check to see if erlang is running"""

parser = OptionParser(usage=usage)

parser.add_option("-a", "--appname",
                  help="Application Name")

parser.add_option("--appcfg",
                  help="Sets erlang application variable.  Expects arguments APP KEY VAL.  Example: '--appcfg p6core somekey someval' becomes '-p6core somekey someval' on the erlang command line",
                  dest="appcfg", default=[], action="append", nargs=3)

parser.add_option("-b", "--bind",
                  help="bind address for listeners (hostname or ip addr)",
                  dest="bind")

parser.add_option("-c", "--config",
                  help="p6init config file",
                  dest="config", default=[], action="append")

parser.add_option("-C", "--scontrol-config",
                  help="scontrol configuration file",
                  dest="sconfigs", default=[], action="append")

parser.add_option("--cookie",
                  help="Erlang cookie (implied from APP+ENV)",
                  dest="cookie")

parser.add_option("-e", "--env",
                  help="Environment (dev,prod,staging,uat,automation)",
                  dest="env", type="choice",choices=["dev","prod","staging","uat","automation"])

parser.add_option("-l", "--logdir",
                  help="Log directory (for APP.log and APP.pid)",
                  dest="logdir")

parser.add_option("-L",
                  help="Erlang library path (can have multiples)",
                  dest="lib", default=[], action="append")

parser.add_option("--longname",
                  help="Use erlang long name syntax (-name) vs short name (-sname)",
                  dest="longname",  action="store_true")

parser.add_option("--max-erl-procs",
                  help="Maximum number of erlang processes, default ~16M",
                  dest="max_erl_procs", action="store", type=int)

parser.add_option("-n", "--node",
                  help="Node name for this node [start|restart|debug] or target node [connect].  Defaults to APP_ENV",
                  dest="node")

parser.add_option("--test",
                  help="Test configuration, just print cmd line",
                  dest="test", default=False, action="store_true")

parser.add_option("-v",
                  help="Verbose (start/stop)",
                  dest="verbose",default=False,action="store_true")


callext("add_options",parser)

(options,args) = parser.parse_args()


erlenv = None
erlopts = []

if options.sconfigs == []:
    options.sconfigs = ["scontrol.conf", os.environ["USER"]+".conf"]

def find_file(file):
    base_dirs=['.','deps/mmd_prop']
    if options.appname:
        base_dirs.append("lib/"+options.appname)
    for base in base_dirs:
        for dir in [".","priv","etc"]:
            fn = os.path.join(base, dir, file)
            if os.path.isfile(fn):
                return fn
    return None

# Used to inject python based config files
def try_load(file):
    fn = find_file(file)
    if fn:
        if options.verbose:
            print "Loading:", fn
        execfile(fn)
    else:
        print "Not found:", file


for sc in options.sconfigs:
    try_load(sc)

callext("after_optparse",options)

if not options.appname:
    parser.print_help()
    print "\nappname not specified"
    exit(1)

if not options.env:
    parser.print_help()
    print "\nENV not specified"
    exit(1)

hostname = socket.gethostname()

#mmd_major = subprocess.check_output("./mmd_version").strip()
#mmd_major = "4"

#defaultCookie = options.appname+"_"+options.env+"_"+mmd_major
#defaultNode = callfirst("default_node",options)

#if not defaultNode:
#    defaultNode = options.appname+"_"+options.env


#if options.max_erl_procs:
#    erlopts.extend(["+P", str(options.max_erl_procs)])

#if not hostname[0] in ["p", "a"]:
#    defaultNodeCookie = hostname[0] + defaultNode

#if not options.node:
#    options.node = defaultNode

#if not options.cookie:
#    options.cookie = defaultCookie

print "NODE: "+repr(options.node)
print "Cookie: "+repr(options.cookie)

if not erlenv:
    erlenv = copy.copy(os.environ)

if not options.logdir:
    options.logdir = os.path.expanduser("/plogs/"+options.appname)

if not options.lib:
    for dir in ["lib","deps","."]:
        if os.path.exists(dir):
            options.lib.append(dir)

if not options.config:
    fn = options.appname+".cfg"
    f = find_file(fn)
    if f:
        options.config.append(f)
    else:
        parser.print_help()
        print "\nCONFIG not specified and I couldn't locate:",fn
        exit(1)

if options.node:
    if options.longname:
        erlopts = ["-name",options.node] + erlopts
    else:
        erlopts = ["-sname",options.node] + erlopts

def str2list(txt):
    return filter(lambda x: x, txt.split(','))

def dataCenter():
    return re.sub(r"^...(....).*$","\\1",socket.gethostname())

# Tags is to allow you to see other node's services that are tagged with a subset of the list supplied here
if options.tags:
    erlopts = ["-mmd_core","tags",str(str2list(options.tags))]+erlopts
else:
    tags = [dataCenter()] # automatically add the datacenter, regardless of environment
    if options.env == "dev":
        tags = tags + [os.getenv("USER"), "mmd"]  #  $USER and mmd tagged services (shared servers run as "mmd")

    erlopts = ["-mmd_core","tags",repr(tags)] + erlopts

# ForceTags automatically tags all services registered by this node in addition to any service supplied tags
if options.forceTags:
    erlopts = ["-mmd_core","force_tags",str(str2list(options.forceTags))]+erlopts
else:
    forceTags = [dataCenter()]
    if options.env == "dev":
        forceTags = forceTags + [os.getenv("USER")]

    erlopts = ["-mmd_core","force_tags", repr(forceTags)] + erlopts


if options.bind:
    erlopts = ["-mmd_core","bind","'"+options.bind+"'"] + erlopts

display_name = options.node


def checkLogDir(logdir):
    if not os.path.exists(logdir):
        print "Creating log directory: "+logdir
        os.makedirs(logdir)

    if not os.access(logdir,os.W_OK):
        print "Error: Can't write to: "+logdir
        exit(1)
    if not os.access(logdir,os.R_OK):
        print "Error: Can't read from: "+logdir
        exit(1)


checkLogDir(options.logdir)

pidfile = options.logdir+"/"+display_name+".pid"
runfile = options.logdir+"/"+display_name+".run"

erlopts.extend(["-p6core","log_dir",'"'+options.logdir+'"'])

erlopts.extend(["-env","version",version])

erlopts.extend(['+K','true','+A','24'])

for lib in options.lib:
    if os.path.exists(lib):
        for f in os.listdir(lib):
            if os.path.exists(lib + "/ebin"):
                erlopts.extend(['-pa', lib + "/ebin"])
            filename = lib+"/"+f+"/ebin"
            if os.path.exists(filename):
                erlopts.extend(['-pa',filename])


if not args:
    parser.print_help()
    print "\nNo arguments specified"
    exit(1)

for arg in args:
    if not arg in valid_args:
        parser.print_help()
        print "\nInvalid argument: " + arg
        exit(1)

#erlenv["ERL_LIBS"] = string.join(options.lib,":")

def ignore(sig,frame):
    return None

def get_current_pid():
    if os.path.isfile(pidfile):
        with open(pidfile) as f:
            pid = int(f.read())
            try:
                os.kill(pid,0)
                return pid
            except:
                return None
    return None

def ensure_not_started():
    if get_current_pid():
        print "Existing pid file found at:",pidfile
        exit(1)


def run_erl(daemon=False, use_exec=False):
    if use_exec:
        os.execvpe("erl", ["erl"] + erlopts, env=erlenv)
    else:
        proc = subprocess.Popen(["erl"] + erlopts,env=erlenv)
        signal.signal(signal.SIGINT,ignore)
        with open(pidfile,"w") as f:
            f.write(str(proc.pid))
        res = proc.wait()
        if not daemon:
            subprocess.call(["stty","sane"])
        print
        if options.verbose:
            print "Erlang exited with:",res
        os.remove(pidfile)
        exit(res)

def start_erl(daemon=False, use_exec=False):
    ensure_not_started()
    erlopts.extend(['-setcookie',options.cookie])
    for c in options.config:
        erlopts.extend(["-p6cfg",c])

    for (a,k,v) in options.appcfg:
        erlopts.extend(["-"+a,k,v])

#    erlopts.extend(["-p6core","log_file",'"'+logfile+'"'])
    erlopts.extend(["-p6env",options.env])

    if daemon:
        erlopts.extend(["-p6core","log_tty","false"])
        erlopts.append("-noshell")

    if options.test:
        print "erl "+string.join(erlopts)
        exit(0)
    else:
        if options.verbose:
            print "Starting: erl "+string.join(erlopts)
        if daemon:
            if not use_exec:
                pid = os.fork()
                if pid:
                    print "Started, process:",pid
                    print "Check for stdout/stderr in:",runfile
                    return
            f = file(runfile,'a+',0)
            dn = file("/dev/null",'r')
            os.dup2(f.fileno(), sys.stdout.fileno())
            os.dup2(f.fileno(), sys.stderr.fileno())
            os.dup2(dn.fileno(), sys.stdin.fileno())
            print "\n\n**STARTING",str(datetime.now())+"**\n"
            sys.stdout.flush()
            run_erl(True, use_exec)
        else:
            run_erl()

def stop_erl(signal=signal.SIGTERM):
    pid = get_current_pid()
    if pid:
        print "Stopping process:",pid,"with signal:",signal
        os.kill(pid,signal)

        # Wait for the process to exit.
        while get_current_pid():
            print "waiting..."
            time.sleep(1)
    else:
        print "Not running"
    exit(0)

for arg in args:
    if arg == "test":
        print erlopts

    elif arg == "start":
        if options.verbose:
            print "Starting..."
        erlopts.extend(["-s","p6init"])
        start_erl(daemon=True)

    elif arg == "upstart":
        if options.verbose:
            print "Starting (upstart)..."
        erlopts.extend(["-s","p6init"])
        start_erl(daemon=True, use_exec=True)

    elif arg == "debug":
        if options.verbose:
            print "Debugging..."
        erlopts.extend(["-p6core","log_console","true"])
        erlopts.extend(["-s","p6init"])
        start_erl()

    elif arg == "kill":
        stop_erl(signal.SIGKILL)

    elif arg == "stop":
        stop_erl()

    elif arg == "restart":
        if options.verbose:
            print "Restarting..."
        stop_erl()
        start_erl()

    elif arg == "status":
        p = get_current_pid()
        if p:
            print display_name,"running, pid:",p
        else:
            print display_name,"not running"

    elif arg == "connect":
        erlopts.extend(["-remsh",args.pop()])
        targetNode = options.node
        if "@" in targetNode:
            baseNode = re.sub(r'(.*?)@.*',r'\1',targetNode)
        else:
            baseNode = targetNode
            targetNode = targetNode+'@'+socket.gethostname()

        myNode =  "%s_%s_%d" % (baseNode,os.getenv("USER"),os.getpid())

        opts = ["erl","-remsh",targetNode,"-sname",myNode,"-setcookie",options.cookie,'-hidden']
        print "Connecting to:",targetNode,"as hidden node:",myNode
        if options.test:
            print string.join(opts," ")
            exit(0)
        else:
            os.execvp("erl",opts)

